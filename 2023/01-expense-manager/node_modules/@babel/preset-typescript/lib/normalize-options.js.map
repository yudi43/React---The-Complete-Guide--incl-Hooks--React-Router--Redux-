{"version":3,"names":["_helperValidatorOption","require","v","OptionValidator","normalizeOptions","options","allowNamespaces","jsxPragma","onlyRemoveTypeImports","TopLevelOptions","ignoreExtensions","disallowAmbiguousJSXLike","jsxPragmaFrag","optimizeConstEnums","allExtensions","isTSX","validateStringOption","validateBooleanOption","invariant","normalized"],"sources":["../src/normalize-options.ts"],"sourcesContent":["import { OptionValidator } from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-typescript\");\n\nexport interface Options {\n  ignoreExtensions?: boolean;\n  allowDeclareFields?: boolean;\n  allowNamespaces?: boolean;\n  disallowAmbiguousJSXLike?: boolean;\n  jsxPragma?: string;\n  jsxPragmaFrag?: string;\n  onlyRemoveTypeImports?: boolean;\n  optimizeConstEnums?: boolean;\n\n  // TODO: Remove in Babel 8\n  allExtensions?: boolean;\n  isTSX?: boolean;\n}\n\nexport default function normalizeOptions(options: Options = {}) {\n  let { allowNamespaces = true, jsxPragma, onlyRemoveTypeImports } = options;\n\n  const TopLevelOptions = {\n    ignoreExtensions: \"ignoreExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    disallowAmbiguousJSXLike: \"disallowAmbiguousJSXLike\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\",\n\n    // TODO: Remove in Babel 8\n    allExtensions: \"allExtensions\",\n    isTSX: \"isTSX\",\n  };\n\n  if (process.env.BABEL_8_BREAKING) {\n    v.invariant(\n      !(\"allExtensions\" in options) && !(\"isTSX\" in options),\n      \"The .allExtensions and .isTSX options have been removed.\\n\" +\n        \"If you want to disable JSX detection based on file extensions, \" +\n        \"you can set the .ignoreExtensions option to true.\\n\" +\n        \"If you want to force JSX parsing, you can enable the \" +\n        \"@babel/plugin-syntax-jsx plugin.\",\n    );\n\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    allowNamespaces = v.validateBooleanOption(\n      TopLevelOptions.allowNamespaces,\n      options.allowNamespaces,\n      true,\n    );\n    jsxPragma = v.validateStringOption(\n      TopLevelOptions.jsxPragma,\n      options.jsxPragma,\n      \"React\",\n    );\n    onlyRemoveTypeImports = v.validateBooleanOption(\n      TopLevelOptions.onlyRemoveTypeImports,\n      options.onlyRemoveTypeImports,\n      true,\n    );\n  }\n\n  const jsxPragmaFrag = v.validateStringOption(\n    TopLevelOptions.jsxPragmaFrag,\n    options.jsxPragmaFrag,\n    \"React.Fragment\",\n  );\n\n  if (!process.env.BABEL_8_BREAKING) {\n    // eslint-disable-next-line no-var\n    var allExtensions = v.validateBooleanOption(\n      TopLevelOptions.allExtensions,\n      options.allExtensions,\n      false,\n    );\n\n    // eslint-disable-next-line no-var\n    var isTSX = v.validateBooleanOption(\n      TopLevelOptions.isTSX,\n      options.isTSX,\n      false,\n    );\n    if (isTSX) {\n      v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n    }\n  }\n\n  const ignoreExtensions = v.validateBooleanOption(\n    TopLevelOptions.ignoreExtensions,\n    options.ignoreExtensions,\n    false,\n  );\n\n  const disallowAmbiguousJSXLike = v.validateBooleanOption(\n    TopLevelOptions.disallowAmbiguousJSXLike,\n    options.disallowAmbiguousJSXLike,\n    false,\n  );\n  if (disallowAmbiguousJSXLike) {\n    if (process.env.BABEL_8_BREAKING) {\n      v.invariant(\n        ignoreExtensions,\n        \"disallowAmbiguousJSXLike:true requires ignoreExtensions:true\",\n      );\n    } else {\n      v.invariant(\n        allExtensions,\n        \"disallowAmbiguousJSXLike:true requires allExtensions:true\",\n      );\n    }\n  }\n\n  const optimizeConstEnums = v.validateBooleanOption(\n    TopLevelOptions.optimizeConstEnums,\n    options.optimizeConstEnums,\n    false,\n  );\n\n  const normalized: Options = {\n    ignoreExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  };\n  if (!process.env.BABEL_8_BREAKING) {\n    normalized.allExtensions = allExtensions;\n    normalized.isTSX = isTSX;\n  }\n  return normalized;\n}\n"],"mappings":";;;;;;AAAA,IAAAA,sBAAA,GAAAC,OAAA;AACA,MAAMC,CAAC,GAAG,IAAIC,sCAAe,CAAC,0BAA0B,CAAC;AAiB1C,SAASC,gBAAgBA,CAACC,OAAgB,GAAG,CAAC,CAAC,EAAE;EAC9D,IAAI;IAAEC,eAAe,GAAG,IAAI;IAAEC,SAAS;IAAEC;EAAsB,CAAC,GAAGH,OAAO;EAE1E,MAAMI,eAAe,GAAG;IACtBC,gBAAgB,EAAE,kBAAkB;IACpCJ,eAAe,EAAE,iBAAiB;IAClCK,wBAAwB,EAAE,0BAA0B;IACpDJ,SAAS,EAAE,WAAW;IACtBK,aAAa,EAAE,eAAe;IAC9BJ,qBAAqB,EAAE,uBAAuB;IAC9CK,kBAAkB,EAAE,oBAAoB;IAGxCC,aAAa,EAAE,eAAe;IAC9BC,KAAK,EAAE;EACT,CAAC;EAAC;EA8BF,MAAMH,aAAa,GAAGV,CAAC,CAACc,oBAAoB,CAC1CP,eAAe,CAACG,aAAa,EAC7BP,OAAO,CAACO,aAAa,EACrB,gBACF,CAAC;EAEkC;IAEjC,IAAIE,aAAa,GAAGZ,CAAC,CAACe,qBAAqB,CACzCR,eAAe,CAACK,aAAa,EAC7BT,OAAO,CAACS,aAAa,EACrB,KACF,CAAC;IAGD,IAAIC,KAAK,GAAGb,CAAC,CAACe,qBAAqB,CACjCR,eAAe,CAACM,KAAK,EACrBV,OAAO,CAACU,KAAK,EACb,KACF,CAAC;IACD,IAAIA,KAAK,EAAE;MACTb,CAAC,CAACgB,SAAS,CAACJ,aAAa,EAAE,wCAAwC,CAAC;IACtE;EACF;EAEA,MAAMJ,gBAAgB,GAAGR,CAAC,CAACe,qBAAqB,CAC9CR,eAAe,CAACC,gBAAgB,EAChCL,OAAO,CAACK,gBAAgB,EACxB,KACF,CAAC;EAED,MAAMC,wBAAwB,GAAGT,CAAC,CAACe,qBAAqB,CACtDR,eAAe,CAACE,wBAAwB,EACxCN,OAAO,CAACM,wBAAwB,EAChC,KACF,CAAC;EACD,IAAIA,wBAAwB,EAAE;IAMrB;MACLT,CAAC,CAACgB,SAAS,CACTJ,aAAa,EACb,2DACF,CAAC;IACH;EACF;EAEA,MAAMD,kBAAkB,GAAGX,CAAC,CAACe,qBAAqB,CAChDR,eAAe,CAACI,kBAAkB,EAClCR,OAAO,CAACQ,kBAAkB,EAC1B,KACF,CAAC;EAED,MAAMM,UAAmB,GAAG;IAC1BT,gBAAgB;IAChBJ,eAAe;IACfK,wBAAwB;IACxBJ,SAAS;IACTK,aAAa;IACbJ,qBAAqB;IACrBK;EACF,CAAC;EACkC;IACjCM,UAAU,CAACL,aAAa,GAAGA,aAAa;IACxCK,UAAU,CAACJ,KAAK,GAAGA,KAAK;EAC1B;EACA,OAAOI,UAAU;AACnB"}